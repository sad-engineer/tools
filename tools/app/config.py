#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------------------------------------------------
import logging
import os
from functools import lru_cache
from pathlib import Path

from dotenv import load_dotenv
from pydantic_settings import BaseSettings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


def get_project_root() -> Path:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞.

    –ò—â–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ñ–∞–π–ª pyproject.toml, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    –∏ –ø–æ–¥–Ω–∏–º–∞—è—Å—å –≤–≤–µ—Ä—Ö –ø–æ –¥–µ—Ä–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.

    Returns:
        Path: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞

    Raises:
        FileNotFoundError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    """
    current = Path(__file__).resolve()
    while current.parent != current:  # –ü–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ—Ä–Ω—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        if (current / 'pyproject.toml').exists():
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {current}")
            return current
        current = current.parent

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ pyproject.toml, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ç–µ–∫—É—â–∏–º —Ñ–∞–π–ª–æ–º
    fallback_path = Path(__file__).parent.parent.parent
    logger.warning(f"pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—É—Ç—å: {fallback_path}")
    return fallback_path


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
PROJECT_ROOT = get_project_root()
CONFIG_DIR = PROJECT_ROOT / "settings"
ENV_FILE = CONFIG_DIR / "tools.env"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é config, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try:
    CONFIG_DIR.mkdir(exist_ok=True)
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {CONFIG_DIR}")
except PermissionError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {CONFIG_DIR}: {e}")
    raise


def create_env_file() -> None:
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª tools.env —Å —à–∞–±–ª–æ–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫.

    –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

    Raises:
        PermissionError: –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        OSError: –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    """
    if not ENV_FILE.exists():
        template = """# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=tools

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
APP_NAME=Tools
DEBUG=True
API_V1_STR=/api/v1
"""
        try:
            ENV_FILE.write_text(template, encoding='utf-8')
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ENV_FILE}")
        except (PermissionError, OSError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {ENV_FILE}: {e}")
            raise


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    if not ENV_FILE.exists():
        create_env_file()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    TEST_ENV = os.environ.get("TOOLS_ENV")
    if TEST_ENV and Path(TEST_ENV).exists():
        load_dotenv(TEST_ENV, override=True)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑: {TEST_ENV}")
    else:
        load_dotenv(ENV_FILE)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑: {ENV_FILE}")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
    raise


TABLE_NAMES: list = [
    "tools",
    "geometry_countersinking_cutter",
    "geometry_deployment_cutter",
    "geometry_drilling_cutter",
    "geometry_milling_cutters",
    "geometry_turning_cutters",
]


class Settings(BaseSettings):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    Parameters:
    POSTGRES_USER : (str) : –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL.
    POSTGRES_PASSWORD : (str) : –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL.
    POSTGRES_HOST : (str) : —Ö–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
    POSTGRES_PORT : (int) : –ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
    POSTGRES_DB : (str) : –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
    APP_NAME : (str) : –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    DEBUG : (bool) : —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏.
    API_V1_STR : (str) : –ø—Ä–µ—Ñ–∏–∫—Å API –≤–µ—Ä—Å–∏–∏ 1.
    TABLE_NAMES : (list) : —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Properties:
    DATABASE_URL : (str) : –ø–æ–ª–Ω—ã–π URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Methods:
    model_dump : (dict) : –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    """

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    POSTGRES_USER: str
    POSTGRES_PASSWORD: str
    POSTGRES_HOST: str
    POSTGRES_PORT: int
    POSTGRES_DB: str

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    APP_NAME: str
    DEBUG: bool
    API_V1_STR: str

    # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    TABLE_NAMES: list = TABLE_NAMES

    class Config:
        env_file = str(TEST_ENV if TEST_ENV and Path(TEST_ENV).exists() else ENV_FILE)
        case_sensitive = True

    @property
    def DATABASE_URL(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        Returns:
            str: URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ postgresql://user:password@host:port/database
        """
        return (
            f"postgresql://{self.POSTGRES_USER}:{self.POSTGRES_PASSWORD}"
            f"@{self.POSTGRES_HOST}:{self.POSTGRES_PORT}/{self.POSTGRES_DB}"
        )

    def to_dict(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        return self.model_dump()

    def validate_database_settings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        required_fields = [self.POSTGRES_USER, self.POSTGRES_PASSWORD, self.POSTGRES_HOST, self.POSTGRES_DB]

        if not all(required_fields):
            logger.error("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return False

        if not isinstance(self.POSTGRES_PORT, int) or self.POSTGRES_PORT <= 0:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.POSTGRES_PORT}")
            return False

        return True


@lru_cache()
def get_settings() -> Settings:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    Returns:
        Settings: –û–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    Raises:
        ValidationError: –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        FileNotFoundError: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    try:
        settings = Settings()

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not settings.validate_database_settings():
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return settings

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    try:
        settings = get_settings()
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL}")
        print(f"üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {settings.APP_NAME}")
        print(f"üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {settings.DEBUG}")
        print(f"üîó API –≤–µ—Ä—Å–∏—è: {settings.API_V1_STR}")
        print(f"üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: {settings.TABLE_NAMES}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ to_dict
        settings_dict = settings.to_dict()
        print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è: {settings_dict}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        is_valid = settings.validate_database_settings()
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î: {'–£—Å–ø–µ—à–Ω–æ' if is_valid else '–û—à–∏–±–∫–∞'}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        exit(1)
