#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------------------------------------------------
"""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö tools.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü.
2. –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
3. –¢–∞–±–ª–∏—Ü–∞ tools –æ—á–∏—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–π.
"""

import argparse
import logging
from typing import List

from sqlalchemy import text

from tools.app.config import get_settings
from tools.app.db.checks import check_database_exists, check_tables_exist
from tools.app.db.session_manager import get_db
from tools.app.db.utils import confirm_clear
from tools.app.models import (
    GeometryCountersinkingCutter,
    GeometryDeploymentCutter,
    GeometryDrillingCutter,
    GeometryMillingCutters,
    GeometryTurningCutters,
    Tool,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

settings = get_settings()

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
MODELS = [
    Tool,
    GeometryCountersinkingCutter,
    GeometryDeploymentCutter,
    GeometryDrillingCutter,
    GeometryMillingCutters,
    GeometryTurningCutters,
]

# –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü
TABLE_NAMES = settings.TABLE_NAMES


def clear_tables_data(existing_tables: List[str]) -> bool:
    """
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

    Args:
        existing_tables (List[str]): –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü

    Returns:
        bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not existing_tables:
        logger.info("–ù–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        return True

    try:
        with get_db() as session:
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∫—Ä–æ–º–µ tools
            geometry_tables = [table for table in existing_tables if table != "tools"]
            tools_table = [table for table in existing_tables if table == "tools"]

            # –û—á–∏—â–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            for table_name in geometry_tables:
                logger.info(f"–û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É '{table_name}'...")

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                count = session.execute(text(f"SELECT COUNT(*) FROM {table_name}")).scalar()

                if count > 0:
                    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    session.execute(text(f"DELETE FROM {table_name}"))
                    session.commit()
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")
                else:
                    logger.info(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–∂–µ –ø—É—Å—Ç–∞")

            # –ó–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tools (–ø–æ—Å–ª–µ–¥–Ω–µ–π)
            for table_name in tools_table:
                logger.info(f"–û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É '{table_name}'...")

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                count = session.execute(text(f"SELECT COUNT(*) FROM {table_name}")).scalar()

                if count > 0:
                    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    session.execute(text(f"DELETE FROM {table_name}"))
                    session.commit()
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")
                else:
                    logger.info(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–∂–µ –ø—É—Å—Ç–∞")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def clear_database() -> bool:
    """
    –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        bool: True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not check_database_exists():
        logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return False

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    existing_tables = check_tables_exist(TABLE_NAMES)

    if not existing_tables:
        logger.info("‚ÑπÔ∏è –ù–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        return True

    # –®–∞–≥ 3: –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    logger.info("–û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...")
    if not clear_tables_data(existing_tables):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö")
        return False

    logger.info("üéâ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    return True


def clear_database_with_options(quiet: bool = False) -> bool:
    """
    –û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ü–∏—è–º–∏.

    Args:
        quiet (bool): –ï—Å–ª–∏ True, –æ—á–∏—â–∞–µ—Ç –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
                     –ï—Å–ª–∏ False, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

    Returns:
        bool: True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if quiet:
        # –¢–∏—Ö–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        logger.info("üßπ –¢–∏—Ö–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        success = clear_database()

        if success:
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
        else:
            logger.error("‚ùå –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å")

        return success
    else:
        # –û—á–∏—Å—Ç–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        if not confirm_clear():
            logger.info("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False

        success = clear_database()

        if not success:
            logger.error("‚ùå –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å")

        return success


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--quiet', '-q', action='store_true', help='–¢–∏—Ö–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')

    args = parser.parse_args()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å –æ–ø—Ü–∏—è–º–∏
    clear_database_with_options(quiet=args.quiet)
