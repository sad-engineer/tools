#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------------------------------------------------
"""
C–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö tools.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü.
2. –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö.
3. –£–¥–∞–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã.
4. –£–¥–∞–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import argparse
import logging
from typing import List

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from sqlalchemy import inspect, text

from tools.app.config import get_settings
from tools.app.db.checks import check_database_exists, check_tables_exist
from tools.app.db.session_manager import get_db, get_engine
from tools.app.db.utils import confirm_removal
from tools.app.models import (
    GeometryCountersinkingCutter,
    GeometryDeploymentCutter,
    GeometryDrillingCutter,
    GeometryMillingCutters,
    GeometryTurningCutters,
    Tool,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

settings = get_settings()

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
MODELS = [
    Tool,
    GeometryCountersinkingCutter,
    GeometryDeploymentCutter,
    GeometryDrillingCutter,
    GeometryMillingCutters,
    GeometryTurningCutters,
]

# –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü
TABLE_NAMES = settings.TABLE_NAMES


def clear_tables_data(existing_tables: List[str]) -> bool:
    """
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö.

    Args:
        existing_tables (List[str]): –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü

    Returns:
        bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not existing_tables:
        logger.info("–ù–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        return True

    try:
        with get_db() as session:
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∫—Ä–æ–º–µ tools
            geometry_tables = [table for table in existing_tables if table != "tools"]
            tools_table = [table for table in existing_tables if table == "tools"]

            # –û—á–∏—â–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            for table_name in geometry_tables:
                logger.info(f"–û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É '{table_name}'...")

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                count = session.execute(text(f"SELECT COUNT(*) FROM {table_name}")).scalar()

                if count > 0:
                    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    session.execute(text(f"DELETE FROM {table_name}"))
                    session.commit()
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")
                else:
                    logger.info(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–∂–µ –ø—É—Å—Ç–∞")

            # –ó–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tools (–ø–æ—Å–ª–µ–¥–Ω–µ–π)
            for table_name in tools_table:
                logger.info(f"–û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É '{table_name}'...")

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                count = session.execute(text(f"SELECT COUNT(*) FROM {table_name}")).scalar()

                if count > 0:
                    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    session.execute(text(f"DELETE FROM {table_name}"))
                    session.commit()
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")
                else:
                    logger.info(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–∂–µ –ø—É—Å—Ç–∞")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def drop_tables(existing_tables: List[str]) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã.

    Args:
        existing_tables (List[str]): –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü

    Returns:
        bool: True –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not existing_tables:
        logger.info("–ù–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return True

    try:
        engine = get_engine()

        # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
        for table_name in reversed(existing_tables):
            logger.info(f"–£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É '{table_name}'...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            for model in MODELS:
                if model.__tablename__ == table_name:
                    model.__table__.drop(engine, checkfirst=True)
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–¥–∞–ª–µ–Ω–∞")
                    break

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def close_all_connections() -> bool:
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î postgres
        conn = psycopg2.connect(
            dbname="postgres",
            user=settings.POSTGRES_USER,
            password=settings.POSTGRES_PASSWORD,
            host=settings.POSTGRES_HOST,
            port=settings.POSTGRES_PORT,
        )

        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            """
            SELECT pg_terminate_backend(pid)
            FROM pg_stat_activity
            WHERE datname = %s AND pid <> pg_backend_pid()
        """,
            (settings.POSTGRES_DB,),
        )

        terminated_count = cursor.rowcount
        logger.info(f"–ó–∞–∫—Ä—ã—Ç–æ {terminated_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

        cursor.close()
        conn.close()
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
        return False


def drop_database() -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        bool: True –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        close_all_connections()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î postgres
        conn = psycopg2.connect(
            dbname="postgres",
            user=settings.POSTGRES_USER,
            password=settings.POSTGRES_PASSWORD,
            host=settings.POSTGRES_HOST,
            port=settings.POSTGRES_PORT,
        )

        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = %s", (settings.POSTGRES_DB,))
        exists = cursor.fetchone()

        if exists:
            # –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(f"DROP DATABASE {settings.POSTGRES_DB}")
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{settings.POSTGRES_DB}' —É–¥–∞–ª–µ–Ω–∞")
        else:
            logger.info(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{settings.POSTGRES_DB}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        cursor.close()
        conn.close()
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def remove_database() -> bool:
    """
    –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    logger.info("üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not check_database_exists():
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å")
        return True

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    existing_tables = check_tables_exist(TABLE_NAMES)

    # –®–∞–≥ 3: –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    logger.info("–û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...")
    if not clear_tables_data(existing_tables):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö")
        return False

    # –®–∞–≥ 4: –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    logger.info("–£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
    if not drop_tables(existing_tables):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
        return False

    # –®–∞–≥ 5: –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    close_all_connections()

    # –®–∞–≥ 6: –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logger.info("–£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    if not drop_database():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return False

    logger.info("üéâ –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True


def remove_database_with_options(quiet: bool = False) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ü–∏—è–º–∏.

    Args:
        quiet (bool): –ï—Å–ª–∏ True, —É–¥–∞–ª—è–µ—Ç –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
                     –ï—Å–ª–∏ False, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

    Returns:
        bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if quiet:
        # –¢–∏—Ö–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        logger.info("üóëÔ∏è –¢–∏—Ö–∞—è —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        success = remove_database()

        if success:
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
        else:
            logger.error("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å")

        return success
    else:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        if not confirm_removal():
            logger.info("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False

        success = remove_database()

        if not success:
            logger.error("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å")

        return success


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--quiet', '-q', action='store_true', help='–¢–∏—Ö–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')

    args = parser.parse_args()

    # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å –æ–ø—Ü–∏—è–º–∏
    remove_database_with_options(quiet=args.quiet)
