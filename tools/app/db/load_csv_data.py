#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------------------------------------------------
import pandas as pd
import logging
import os
from pathlib import Path
from typing import List, Dict, Any

from tools.app.db.session_manager import get_db
from tools.app.models.tools import Tool
from tools.app.config import get_settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

settings = get_settings()


def detect_encoding(file_path: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É CSV —Ñ–∞–π–ª–∞.
    
    Args:
        file_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        
    Returns:
        str: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
    """
    import chardet
    
    with open(file_path, 'rb') as file:
        raw_data = file.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding']
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")
        return encoding


def load_csv_data(csv_file_path: str = None) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞.
    
    Args:
        csv_file_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    if csv_file_path is None:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        project_root = Path(__file__).parent.parent.parent.parent
        csv_file_path = project_root / "database_backups" / "tools_old.csv"
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        encoding = detect_encoding(str(csv_file_path))
        
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {csv_file_path}")
        df = pd.read_csv(csv_file_path, encoding=encoding)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        logger.info("–ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:")
        for i, row in df.head(3).iterrows():
            logger.info(f"  {i}: {dict(row)}")
        
        return df.to_dict('records')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV: {e}")
        raise


def map_csv_to_model(csv_data: List[Dict[str, Any]]) -> List[Tool]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –≤ –º–æ–¥–µ–ª–∏ Tool.
    
    Args:
        csv_data (List[Dict[str, Any]]): –î–∞–Ω–Ω—ã–µ –∏–∑ CSV
        
    Returns:
        List[Tool]: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Tool
    """
    tools = []
    
    for i, row in enumerate(csv_data):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            index = row.get('index')
            marking = str(row.get('–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ', f'unknown-{i}'))
            group = str(row.get('–¢–∏–ø_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞', ''))
            standard = str(row.get('–°—Ç–∞–Ω–¥–∞—Ä—Ç', ''))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ index —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            if index is None or pd.isna(index):
                logger.warning(f"–°—Ç—Ä–æ–∫–∞ {i}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç index, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            try:
                tool_id = int(index)
            except (ValueError, TypeError):
                logger.warning(f"–°—Ç—Ä–æ–∫–∞ {i}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π index '{index}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id
            tool = Tool(
                id=tool_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º index –∏–∑ CSV –∫–∞–∫ id
                marking=marking,
                group=group if group != 'nan' else None,
                standard=standard if standard != 'nan' else None
            )
            
            tools.append(tool)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
            logger.error(f"–î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {row}")
            continue
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(tools)} –º–æ–¥–µ–ª–µ–π Tool")
    return tools


def save_tools_to_db(tools: List[Tool]) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        tools (List[Tool]): –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    """
    saved_count = 0
    
    with get_db() as session:
        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tools –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("–û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tools...")
            session.query(Tool).delete()
            session.commit()
            logger.info("–¢–∞–±–ª–∏—Ü–∞ tools –æ—á–∏—â–µ–Ω–∞")
            
            for i, tool in enumerate(tools):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º id
                    existing = session.query(Tool).filter(Tool.id == tool.id).first()
                    if existing:
                        logger.warning(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å id {tool.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    session.add(tool)
                    saved_count += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
                    if (i + 1) % 100 == 0:
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1} –∑–∞–ø–∏—Å–µ–π...")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool.marking} (id={tool.id}): {e}")
                    session.rollback()
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.commit()
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            session.rollback()
            raise
    
    return saved_count


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
        csv_data = load_csv_data()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ–¥–µ–ª–∏
        tools = map_csv_to_model(csv_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        saved_count = save_tools_to_db(tools)
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


if __name__ == "__main__":
    main()
