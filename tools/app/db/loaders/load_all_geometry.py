#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------------------------------------------------
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
- –§—Ä–µ–∑—ã (geometry_milling_cutters)
- –°–≤–µ—Ä–ª–∞ (geometry_drilling_cutter)
- –ó–µ–Ω–∫–µ—Ä—ã (geometry_countersinking_cutter)
- –†–∞–∑–≤–µ—Ä—Ç–∫–∏ (geometry_deployment_cutter)
- –¢–æ–∫–∞—Ä–Ω—ã–µ —Ä–µ–∑—Ü—ã (geometry_turning_cutters)
"""

import logging
from pathlib import Path

from tools.app.db.loaders.base_loader import BaseGeometryLoader
from tools.app.db.loaders.load_countersinking_cutter import COUNTERSINKING_COLUMN_MAPPING
from tools.app.db.loaders.load_deployment_cutter import DEPLOYMENT_COLUMN_MAPPING
from tools.app.db.loaders.load_drilling_cutter import DRILL_COLUMN_MAPPING
from tools.app.db.loaders.load_milling_cutters import MILLING_CUTTER_COLUMN_MAPPING
from tools.app.db.loaders.load_turning_cutters import TURNING_COLUMN_MAPPING
from tools.app.models.geometry_countersinking_cutter import GeometryCountersinkingCutter
from tools.app.models.geometry_deployment_cutter import GeometryDeploymentCutter
from tools.app.models.geometry_drilling_cutter import GeometryDrillingCutter
from tools.app.models.geometry_milling_cutters import GeometryMillingCutters
from tools.app.models.geometry_turning_cutters import GeometryTurningCutters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
LOADERS_CONFIG = {
    "–§—Ä–µ–∑–∞": {
        "model": GeometryMillingCutters,
        "mapping": MILLING_CUTTER_COLUMN_MAPPING,
    },
    "–°–≤–µ—Ä–ª–æ": {
        "model": GeometryDrillingCutter,
        "mapping": DRILL_COLUMN_MAPPING,
    },
    "–ó–µ–Ω–∫–µ—Ä": {
        "model": GeometryCountersinkingCutter,
        "mapping": COUNTERSINKING_COLUMN_MAPPING,
    },
    "–†–∞–∑–≤–µ—Ä—Ç–∫–∞": {
        "model": GeometryDeploymentCutter,
        "mapping": DEPLOYMENT_COLUMN_MAPPING,
    },
    "–†–µ–∑–µ—Ü": {
        "model": GeometryTurningCutters,
        "mapping": TURNING_COLUMN_MAPPING,
    },
}


def load_all_geometry_data(csv_file_path: str = None) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.

    Args:
        csv_file_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    """
    if csv_file_path is None:
        project_root = Path(__file__).parent.parent.parent.parent.parent
        csv_file_path = project_root / "database_backups" / "tools_old.csv"

    results = {}

    for tool_type, config in LOADERS_CONFIG.items():
        try:
            logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {tool_type}...")

            loader = BaseGeometryLoader(
                tool_type=tool_type, model_class=config["model"], column_mapping=config["mapping"]
            )

            loaded_count = loader.run(csv_file_path)
            results[tool_type] = loaded_count

            logger.info(f"‚úÖ {tool_type}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –∑–∞–ø–∏—Å–µ–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {tool_type}: {e}")
            results[tool_type] = 0

    return results


def load_all_geometry():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

        results = load_all_geometry_data()

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        total_loaded = 0
        for tool_type, count in results.items():
            logger.info(f"  {tool_type}: {count} –∑–∞–ø–∏—Å–µ–π")
            total_loaded += count

        logger.info(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_loaded} –∑–∞–ø–∏—Å–µ–π")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    load_all_geometry()
