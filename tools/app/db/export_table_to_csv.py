#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------------------------------------------------
import pandas as pd
import logging
import os
from pathlib import Path
from typing import Optional, List
from datetime import datetime

from sqlalchemy import text
from tools.app.db.session_manager import get_db
from tools.app.config import get_settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

settings = get_settings()


def get_table_list() -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞–±–ª–∏—Ü
    """
    with get_db() as session:
        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
        result = session.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name
        """))
        
        tables = [row[0] for row in result]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        return tables


def export_table_to_csv(table_name: str, output_dir: str = None, encoding: str = 'utf-8') -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ CSV —Ñ–∞–π–ª.
    
    Args:
        table_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        encoding (str): –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É CSV —Ñ–∞–π–ª—É
    """
    if output_dir is None:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        project_root = Path(__file__).parent.parent.parent.parent
        output_dir = project_root / "tools" / "app" / "resources" / "tables_csv"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    try:
        with get_db() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            query = f"SELECT * FROM {table_name}"
            df = pd.read_sql_query(query, session.bind)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")
            logger.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{table_name}_{timestamp}.csv"
            filepath = Path(output_dir) / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            df.to_csv(filepath, index=False, encoding=encoding)
            
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filepath}")
            logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {filepath.stat().st_size / 1024:.1f} KB")
            
            return str(filepath)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}")
        raise


def export_all_tables(output_dir: str = None, encoding: str = 'utf-8') -> List[str]:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ CSV —Ñ–∞–π–ª—ã.
    
    Args:
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        encoding (str): –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    """
    tables = get_table_list()
    exported_files = []
    
    for table in tables:
        try:
            filepath = export_table_to_csv(table, output_dir, encoding)
            exported_files.append(filepath)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É '{table}': {e}")
            continue
    
    logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(exported_files)} –∏–∑ {len(tables)} —Ç–∞–±–ª–∏—Ü")
    return exported_files


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü –∏–∑ –ë–î –≤ CSV')
    parser.add_argument('--table', '-t', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    parser.add_argument('--all', '-a', action='store_true', help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã')
    parser.add_argument('--output', '-o', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--encoding', '-e', default='utf-8', help='–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤')
    
    args = parser.parse_args()
    
    try:
        if args.all:
            logger.info("üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
            exported_files = export_all_tables(args.output, args.encoding)
            logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(exported_files)}")
            
        elif args.table:
            logger.info(f"üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É '{args.table}'")
            filepath = export_table_to_csv(args.table, args.output, args.encoding)
            logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª: {filepath}")
            
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            tables = get_table_list()
            
            if not tables:
                logger.warning("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü")
                return
            
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            for i, table in enumerate(tables, 1):
                print(f"  {i}. {table}")
            
            print(f"\n  {len(tables) + 1}. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
            print("  0. –í—ã—Ö–æ–¥")
            
            try:
                choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É (–Ω–æ–º–µ—Ä): "))
                
                if choice == 0:
                    logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                    return
                elif choice == len(tables) + 1:
                    logger.info("üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
                    exported_files = export_all_tables(args.output, args.encoding)
                    logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(exported_files)}")
                elif 1 <= choice <= len(tables):
                    table_name = tables[choice - 1]
                    logger.info(f"üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É '{table_name}'")
                    filepath = export_table_to_csv(table_name, args.output, args.encoding)
                    logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª: {filepath}")
                else:
                    logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    
            except ValueError:
                logger.error("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            except KeyboardInterrupt:
                logger.info("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        raise


if __name__ == "__main__":
    main()
