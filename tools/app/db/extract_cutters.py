#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------------------------------------------------
import pandas as pd
import logging
from pathlib import Path
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def detect_encoding(file_path: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É CSV —Ñ–∞–π–ª–∞."""
    import chardet
    
    with open(file_path, 'rb') as file:
        raw_data = file.read()
        result = chardet.detect(raw_data)
        encoding = result['encoding']
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")
        return encoding


def extract_milling_cutters(
    input_file: str = "database_backups/tools_old.csv",
    output_file: str = "database_backups/milling_cutters.csv",
    tool_type_column: str = "–¢–∏–ø_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
    tool_type_value: str = "–§—Ä–µ–∑–∞"
) -> bool:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—Ä–µ–∑—ã –∏–∑ CSV —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.
    
    Args:
        input_file (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É
        output_file (str): –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É
        tool_type_column (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–∏–ø–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        tool_type_value (str): –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—Ä–µ–∑
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        project_root = Path(__file__).parent.parent.parent.parent
        input_path = project_root / input_file
        output_path = project_root / output_file
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not input_path.exists():
            logger.error(f"–§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        encoding = detect_encoding(str(input_path))
        
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {input_path}")
        df = pd.read_csv(input_path, encoding=encoding)
        
        logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df)} –∑–∞–ø–∏—Å–µ–π –∏ {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–∏–ø–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if tool_type_column not in df.columns:
            logger.error(f"–ö–æ–ª–æ–Ω–∫–∞ '{tool_type_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
            return False
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ—Ä–µ–∑—ã
        logger.info(f"–ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å '{tool_type_value}' –≤ –∫–æ–ª–æ–Ω–∫–µ '{tool_type_column}'")
        milling_cutters = df[df[tool_type_column] == tool_type_value].copy()
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(milling_cutters)} —Ñ—Ä–µ–∑")
        
        if len(milling_cutters) == 0:
            logger.warning("–§—Ä–µ–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        logger.info("–£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏...")
        initial_columns = len(milling_cutters.columns)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN –∏–ª–∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        milling_cutters = milling_cutters.dropna(axis=1, how='all')
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        empty_string_columns = []
        for col in milling_cutters.columns:
            if milling_cutters[col].dtype == 'object':  # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                if (milling_cutters[col].astype(str).str.strip() == '').all():
                    empty_string_columns.append(col)
        
        if empty_string_columns:
            logger.info(f"–£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏: {empty_string_columns}")
            milling_cutters = milling_cutters.drop(columns=empty_string_columns)
        
        final_columns = len(milling_cutters.columns)
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {initial_columns - final_columns} –ø—É—Å—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫")
        logger.info(f"–û—Å—Ç–∞–ª–æ—Å—å {final_columns} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º:")
        for col in milling_cutters.columns:
            non_null_count = milling_cutters[col].notna().sum()
            logger.info(f"  {col}: {non_null_count}/{len(milling_cutters)} –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        milling_cutters.to_csv(output_path, index=False, encoding='utf-8')
        
        logger.info(f"‚úÖ –§—Ä–µ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {output_path.stat().st_size / 1024:.1f} KB")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
        logger.info("–ü–µ—Ä–≤—ã–µ 3 —Ñ—Ä–µ–∑—ã:")
        for i, (_, row) in enumerate(milling_cutters.head(3).iterrows(), 1):
            logger.info(f"  {i}. {dict(row)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        logger.info("üöÄ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ CSV —Ñ–∞–π–ª–∞")
        
        success = extract_milling_cutters(
            tool_type_value="–ó–µ–Ω–∫–µ—Ä",
            output_file="database_backups/countersinking_cutters.txt"
        )
        
        if success:
            logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main()
